const CACHE_NAME = 'pwa-cache-v1';
const urlsToCache = [
    './',                         // Root directory
    './index.html',               // Main HTML file
    './tracker.html',             // Tracker page
    './tools.html',               // Tools page
    './manifest.json',            // PWA manifest
    './styles.css',               // CSS file
    './script.js',                // JavaScript file
    './fonts/NJFont-Medium.ttf',  // Custom font
    './fonts/NJFont-Book.ttf'     // Custom font
];

// Install event - caching app shell files
self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME).then(cache => {
            console.log('Opened cache');
            return cache.addAll(urlsToCache);
        })
    );
});

// Activate event - cleaning up old caches
self.addEventListener('activate', event => {
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheName !== CACHE_NAME) {
                        console.log('Deleting old cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});

// Fetch event - serving cached content first
self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request).then(response => {
            // Serve cached response if available, otherwise fetch from network
            return response || fetch(event.request);
        }).catch(() => {
            // Fallback for offline mode (optional)
            if (event.request.mode === 'navigate') {
                return caches.match('./index.html');
            }
        })
    );
});
